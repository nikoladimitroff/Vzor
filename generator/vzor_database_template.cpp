// DO NOT MODIFY THIS FILE, IT IS AUTOGENERATED
#include <vzor/vzor.h>
// REFLECTED HEADER LIST BEGINS HERE

namespace Vzor
{
	namespace Database
	{
		static std::array<char, /*REFLECTED_TYPES_COUNT*/ * sizeof(ReflectedType)> ImplReflectedTypesList;
		struct TypeRegistrator
		{
			TypeRegistrator(ReflectedType&& type)
			{
				std::memcpy(&ImplReflectedTypesList[type.TypeId.GetValue() * sizeof(ReflectedType)], &type, sizeof(ReflectedType));
			}
		};

		static struct ReflectedDatabaseInitializer
		{
			ReflectedDatabaseInitializer()
			{
				Vzor::Detail::AllReflectedTypes = reinterpret_cast<const ReflectedType*>(ImplReflectedTypesList.data());
			}
		} VzorInitializer;

		template <typename T, typename U>
		constexpr size_t offsetof_impl(T const* t, U T::* a) {
			return (char const*)t - (char const*)&(t->*a) >= 0 ?
				(char const*)t - (char const*)&(t->*a) :
				(char const*)&(t->*a) - (char const*)t;
		}

		#define OffsetOf(Type_, Attr_)                          \
			offsetof_impl((Type_ const*)nullptr, &Type_::Attr_)

		// Do not modify this file beyond this point - it is autogenerated
		// REFLECTED DATA BEGINS HERE

		// REFLECTED DATA ENDS HERE
	}
}
