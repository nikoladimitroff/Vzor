#include <vzor/vzor.h>

namespace Vzor
{
	namespace Database
	{
		// REFLECTED ARRAY DEFINITION HERE

		static std::array<ReflectedType, 4> AllReflectedTypes;

		struct TypeRegistrator
		{
			TypeRegistrator(ReflectedType&& type)
			{
				std::memcpy(&AllReflectedTypes[type.TypeId], &type, sizeof(ReflectedType));
			}
		};

		static struct ReflectedDatabaseInitializer
		{
			ReflectedDatabaseInitializer()
			{
				Vzor::Detail::AllReflectedTypes = &AllReflectedTypes[0];
			}
		} VzorInitializer;

		// Do not modify this file beyond this point - it is autogenerated
		// REFLECTED DATA BEGINS HERE

	
        static TypeRegistrator Registrator_char({
            0, "char",
            {
                
            }
        });
	
        static TypeRegistrator Registrator_int({
            1, "int",
            {
                
            }
        });
	
        static TypeRegistrator Registrator_float({
            2, "float",
            {
                
            }
        });
	
        static TypeRegistrator Registrator_Vector3({
            3, "Vector3",
            {
                ReflectedVariable(2, "X", 0x0),
				ReflectedVariable(2, "Y", 0x0),
				ReflectedVariable(2, "Z", 0x0)
            }
        });		// REFLECTED DATA ENDS HERE
	}
}